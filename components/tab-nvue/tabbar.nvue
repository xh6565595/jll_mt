<template>
	<div>
		<div v-if="drag" class="wrap tab-bar-scroll" :style="backgroundColor">
			<scroller class="scroll" scrollDirection="horizontal" showScrollbar="false">
				<div
					class="tab-bar-item tab-bar-scroll-width"
					v-for="(tabBar, t) in tabBars"
					:key="t"
					:ref="tabBar.value + t"
					@click="change(t)"
				>
					<text v-if="ifBackImg" class="tab-bar-title light"  :class="[tabIndex === t ? 'active' : '']">{{
						tabBar.name
					}}</text>
					<text v-else class="tab-bar-title " :class="[tabIndex === t ? 'activeDark' : '']">{{
						tabBar.name
					}}</text>
				</div>
			</scroller>
		</div>
		<div v-else class="wrap tab-bar" :style="backgroundColor">
			<div
				class="tab-bar-item f1"
				v-for="(tabBar, t) in tabBars"
				:key="t"
				:ref="tabBar.value + t"
				@click="change(t)"
			>
				<text v-if="ifBackImg" class="tab-bar-title" :class="[tabIndex === t ? 'active' : '']">{{
					tabBar.name
				}}</text>
				<text v-else class="tab-bar-title " :class="[tabIndex === t ? 'activeDark' : '']">{{
					tabBar.name
				}}</text>
			</div>
		</div>
	</div>
</template>

<script>
const dom = weex.requireModule('dom');

export default {
	props: {
		drag: {
			type: Boolean,
			default: true
		},
		tabBars: {
			type: Array,
			default: function(e) {
				return [];
			}
		},
		tabIndex: {
			type: Number,
			default: 0
		},
		backColor:{
			type: [String,Array],
			default: "#ffffff"
			
		},
		ifBackImg:{
			type: Boolean,
			default: false
		}
	},
	data(){
		return{
			bgStyle:'background-color:#ffffff'
		}
	},
	watch:{
		tabIndex(newVal){
			// this.change(newVal)
		}
	},
	computed:{
		backgroundColor(){
			// console.log(this.backColor.length)
			if(this.ifBackImg && this.backColor.length>=2){
				// console.log(`"background-image":linear-gradient(to right, ${this.backColor[0]},${this.backColor[1]})`)
				return {"background-image":`linear-gradient(to right, ${this.backColor[0]},${this.backColor[1]})`}
				
			}else{
				// console.log(`"background-color":"${this.backColor}"`)
				return {"background-color":'#fff'}
			}
		}
	},
	methods: {
		async change(index, e) {

			let ret = {
				index: index
			};

			this.$emit('tabChange', ret);
			const el = this.$refs[this.tabBars[index].value + index][0]
			// let elSize = await this.getElSize(el);
			// if (elSize.left + elSize.width > 750) {
			//     let idx = index - 4;
			//     let newEl = this.$refs[this.tabBars[idx].id + idx][0]
			//     dom.scrollToElement(newEl, {});
			//     return;
			// }
			// if (elSize.left < 0) {
			//     dom.scrollToElement(el, {});
			// }
			dom.scrollToElement(el, {});
		},
		getElSize(el) { //得到元素的size
		    return new Promise((res, rej) => {
		        const result = dom.getComponentRect(el, option => {
		            res(option.size);
		        })
		    })
		}
	}
};
</script>
<style>
.wrap {
	height: 70px;
	width: 750px;
	flex-direction: row;
	font-size: 30px;
	
}
.tab-bar {
	justify-content: space-between;
	padding-left: 30px;
	padding-right: 30px;
}
.scroll {
	height: 70px;
	width: 750px;
	flex-direction: row;
	/* background-color: pink; */
}
.tab-bar-item {
	height: 70px;
	flex-direction: column;
	align-items: center;
	justify-content: center;
}
.f1{
	flex:1
}
.tab-bar-scroll-width {
	width: 100px;
}
.tab-bar-title {
	height: 70px;
	line-height: 70px;
	font-size: 28px;
	color: #333;
	border-bottom-width: 4px;
	border-color: transparent;
	opacity: .6;
}
.light{
	color:#fff
}
.dark{
	color: #404040;
}
.active {
	color: #fff;
	border-color: #fff;
	opacity: 1;
	font-size: 30px;
}
.activeDark{
	color: #FF7047;
	border-color: #FF7047;
	opacity: 1;
	font-size: 30px;
}
</style>
